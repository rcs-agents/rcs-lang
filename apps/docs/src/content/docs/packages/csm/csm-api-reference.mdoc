---
title: CSM API Reference
description: API documentation for Conversational State Machine
---
# CSM API Reference

## Overview

The `@rcs-lang/csm` package provides a lightweight conversation state machine for RCS agents. This is the core runtime that executes RCL-compiled conversation flows with support for multi-flow machines, flow invocations, JSON Logic conditions, and scoped context management.

## Core Classes

### ConversationalAgent

Main class for running conversation flows.

```typescript
class ConversationalAgent {
  constructor(options: AgentOptions)
  
  // Machine/Flow management (supports both single-flow and multi-flow machines)
  addMachine(machine: MachineDefinitionJSON): void
  addFlow(flow: FlowDefinition): void  // Legacy support
  removeFlow(flowId: string): void
  
  // State management
  getCurrentState(): { machine: string; state: string }
  setState(machineId: string, stateId: string): void  // For restoration
  
  // Message processing
  processInput(input: string): Promise<ProcessResult>
  
  // Context management
  getContext(): Context
  updateContext(updates: Partial<Context>): void
  
  // Serialization
  toURLHash(): string
  static fromURLHash(hash: string, options: AgentOptions): ConversationalAgent
}
```

### FlowMachine

Executes individual conversation flows.

```typescript
class FlowMachine {
  constructor(flow: FlowDefinition, context?: Context)
  
  // State transitions
  transition(event: Event): Promise<TransitionResult>
  getCurrentState(): string
  
  // Context management
  getContext(): Context
  updateContext(updates: Partial<Context>): void
  
  // Flow control
  start(): Promise<void>
  stop(): void
  reset(): void
}
```

## Key Interfaces

### MachineDefinitionJSON

Supports both single-flow and multi-flow machines:

```typescript
type MachineDefinitionJSON = SingleFlowMachineDefinitionJSON | MultiFlowMachineDefinitionJSON;

interface SingleFlowMachineDefinitionJSON {
  id: string;
  initial: string;
  states: Record<string, StateDefinitionJSON>;
  meta?: MachineMetadata;
}

interface MultiFlowMachineDefinitionJSON {
  id: string;
  initialFlow: string;
  flows: Record<string, SingleFlowMachineDefinitionJSON>;
  meta?: MachineMetadata;
}
```

### StateDefinitionJSON

```typescript
interface StateDefinitionJSON {
  transitions: TransitionJSON[];
  meta?: StateMetadata;
}
```

### TransitionJSON

```typescript
interface TransitionJSON {
  pattern?: string;      // Pattern to match user input
  target?: string;       // Target state/flow reference
  context?: Record<string, any>;  // Context updates
  condition?: string | ConditionObject;  // Transition condition
  priority?: number;     // Pattern matching priority
  flowInvocation?: FlowInvocationDefinition;  // Flow invocation config
}

type ConditionObject = 
  | { type: "code"; expression: string }
  | { type: "jsonlogic"; rule: JSONLogicRule };
```

### FlowInvocationDefinition

```typescript
interface FlowInvocationDefinition {
  flowId: string;                    // ID of flow to invoke
  parameters?: Record<string, any>;  // Parameters to pass
  onResult: {                        // Result handlers
    end?: ResultHandler;
    cancel?: ResultHandler;
    error?: ResultHandler;
  };
}

interface ResultHandler {
  operations?: ContextOperation[];   // Context operations
  target: string;                    // Target state
}

interface ContextOperation {
  set?: { variable: string; value: any };
  append?: { to: string; value: any };
  merge?: { into: string; value: any };
}
```

### ScopedContext

```typescript
interface ScopedContext {
  conversation: Record<string, any>;  // Session-wide context
  flow: Record<string, any>;          // Flow-scoped context
  params: Record<string, any>;        // Parameter context
}
```

### ProcessResult

```typescript
interface ProcessResult {
  state: string;        // Current state ID
  machine: string;      // Current machine/flow ID
  transitioned: boolean; // Whether transition occurred
  transition?: Transition; // The transition taken
  context: Context;     // Updated context
}
```

## Usage Examples

### Basic Agent Setup

```typescript
import { ConversationalAgent, type MachineDefinitionJSON } from '@rcs-lang/csm';

// Multi-flow machine definition
const coffeeShopMachine: MachineDefinitionJSON = {
  id: 'CoffeeShopBot',
  initialFlow: 'MainFlow',
  flows: {
    MainFlow: {
      id: 'MainFlow',
      initial: 'Welcome',
      states: {
        Welcome: {
          transitions: [
            {
              pattern: 'order coffee',
              flowInvocation: {
                flowId: 'OrderFlow', 
                onResult: {
                  end: { target: 'OrderComplete' },
                  cancel: { target: 'Welcome' }
                }
              }
            }
          ]
        }
      }
    },
    OrderFlow: {
      id: 'OrderFlow',
      initial: 'ChooseSize',
      states: {
        ChooseSize: {
          transitions: [
            { pattern: 'small', target: ':end', context: { size: 'small' } }
          ]
        }
      }
    }
  }
};

const agent = new ConversationalAgent({
  id: 'coffee-bot',
  onStateChange: async (event) => {
    console.log(`State: ${event.state} in ${event.machine}`);
    await sendMessage(getMessageForState(event.state));
  }
});

// Add machine (supports both single-flow and multi-flow)
agent.addMachine(coffeeShopMachine);

// Process user input
const response = await agent.processInput('order coffee');
```

### JSON Logic Conditions

```typescript
const machineWithConditions: MachineDefinitionJSON = {
  id: 'ConditionalBot',
  initial: 'CheckAccess',
  states: {
    CheckAccess: {
      transitions: [
        {
          pattern: 'premium feature',
          target: 'PremiumContent',
          condition: {
            type: 'jsonlogic',
            rule: {
              'and': [
                { '==': [{ 'var': 'membership' }, 'premium'] },
                { '>': [{ 'var': 'points' }, 100] }
              ]
            }
          }
        },
        {
          pattern: 'basic feature',
          target: 'BasicContent',
          condition: {
            type: 'code',
            expression: 'context.membership !== "guest"'
          }
        }
      ]
    }
  }
};
```

### Context Operations

```typescript
// Flow invocation with context operations
{
  "flowInvocation": {
    "flowId": "CreateOrder",
    "parameters": { "source": "menu" },
    "onResult": {
      "end": {
        "operations": [
          { "append": { "to": "orders", "value": { "var": "result" } } },
          { "set": { "variable": "lastOrderTime", "value": { "var": "now" } } }
        ],
        "target": "OrderHistory"
      }
    }
  }
}
```

See the main README for more detailed examples.
