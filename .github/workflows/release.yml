name: Manual Release & Publish

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create prerelease'
        required: false
        default: false
        type: boolean
      packages:
        description: 'Packages to release (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string

env:
  BUN_VERSION: 1.2.18
  NPM_CONFIG_TOKEN: ${{ secrets.NPM_CONFIG_TOKEN }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Java 17 (for ANTLR)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: bun install
        
      - name: Install Moon
        run: bun install -g @moonrepo/cli

      - name: Build all packages
        run: moon run :build

      - name: Run tests
        run: moon run :test

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual release - bump version
            RELEASE_TYPE=${{ github.event.inputs.release_type }}
            PRERELEASE=${{ github.event.inputs.prerelease }}
            
            # Update versions in all publishable packages
            NEW_VERSION=$(node -e "
              const pkg = require('./package.json');
              const semver = require('semver');
              let newVersion = semver.inc(pkg.version, '$RELEASE_TYPE');
              if ('$PRERELEASE' === 'true') {
                newVersion = semver.inc(pkg.version, 'pre$RELEASE_TYPE', 'beta');
              }
              console.log(newVersion);
            ")
            
            # Update package.json files
            for pkg in packages/*/package.json apps/*/package.json; do
              if ! grep -q '"private": true' "$pkg"; then
                node -e "
                  const fs = require('fs');
                  const pkg = JSON.parse(fs.readFileSync('$pkg', 'utf8'));
                  pkg.version = '$NEW_VERSION';
                  fs.writeFileSync('$pkg', JSON.stringify(pkg, null, 2) + '\n');
                "
              fi
            done
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            # Tag-based release - extract version from tag
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag (if manual release)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: release v${{ steps.version.outputs.version }}"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
          git push origin main --tags

      - name: Generate changelog
        id: changelog
        run: |
          # Create basic changelog from recent commits
          echo "## Changes" > CHANGELOG_TEMP.md
          git log --pretty=format:"- %s (%h)" --since="$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '1 month ago')"..HEAD >> CHANGELOG_TEMP.md || echo "- Initial release" >> CHANGELOG_TEMP.md
          
          # Set multiline output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          draft: false

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [release]
    if: success()
    
    strategy:
      matrix:
        package:
          - { name: '@rcs-lang/ast', path: 'packages/ast' }
          - { name: '@rcs-lang/compiler', path: 'packages/compiler' }
          - { name: '@rcs-lang/csm', path: 'packages/csm' }
          - { name: '@rcs-lang/language-service', path: 'packages/language-service' }
          - { name: '@rcs-lang/cli', path: 'packages/cli' }
          # Note: IDE app removed as it doesn't exist in the filesystem
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install
        
      - name: Install Moon
        run: bun install -g @moonrepo/cli

      - name: Build package
        run: |
          cd ${{ matrix.package.path }}
          moon run build

      - name: Check if package should be published
        id: should_publish
        run: |
          cd ${{ matrix.package.path }}
          if ! grep -q '"private": true' package.json; then
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.should_publish.outputs.publish == 'true'
        run: |
          cd ${{ matrix.package.path }}
          
          # Check if this version already exists
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION of $PACKAGE_NAME already published, skipping..."
            exit 0
          fi
          
          # Publish the package
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            bun publish --tag beta --access public
          else
            bun publish --access public
          fi
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_CONFIG_TOKEN }}

  publish-vscode:
    name: Publish VSCode Extension
    runs-on: ubuntu-latest
    needs: [release]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install
        
      - name: Install Moon
        run: bun install -g @moonrepo/cli

      - name: Build extension
        run: |
          cd apps/extension
          moon run build

      - name: Install vsce
        run: bun install -g @vscode/vsce

      - name: Package extension
        run: |
          cd apps/extension
          vsce package

      - name: Publish to VSCode Marketplace
        if: "!contains(needs.release.outputs.version, 'beta')"
        run: |
          cd apps/extension
          vsce publish --pat ${{ secrets.VSCODE_PUBLISH_TOKEN }}
        env:
          VSCODE_PUBLISH_TOKEN: ${{ secrets.VSCODE_PUBLISH_TOKEN }}

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-${{ needs.release.outputs.version }}
          path: apps/extension/*.vsix

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, publish-npm, publish-vscode]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.publish-npm.result == 'success' && needs.publish-vscode.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.release.outputs.version }} published successfully!"
          echo "üì¶ NPM packages published"
          echo "üîå VSCode extension published"
          
      - name: Notify failure
        if: needs.publish-npm.result == 'failure' || needs.publish-vscode.result == 'failure'
        run: |
          echo "‚ùå Release ${{ needs.release.outputs.version }} failed to publish"
          echo "NPM: ${{ needs.publish-npm.result }}"
          echo "VSCode: ${{ needs.publish-vscode.result }}"
          exit 1