import { RclLexerBase } from "../RclLexerBase";

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class RclLexer extends RclLexerBase {
    public static readonly IMPORT = 1;
    public static readonly AS = 2;
    public static readonly WITH = 3;
    public static readonly MATCH = 4;
    public static readonly START = 5;
    public static readonly ON = 6;
    public static readonly APPEND = 7;
    public static readonly SET = 8;
    public static readonly MERGE = 9;
    public static readonly TO = 10;
    public static readonly INTO = 11;
    public static readonly RESULT = 12;
    public static readonly FLOW_END = 13;
    public static readonly FLOW_CANCEL = 14;
    public static readonly FLOW_ERROR = 15;
    public static readonly BOOLEAN = 16;
    public static readonly NULL = 17;
    public static readonly NUMBER = 18;
    public static readonly ATTRIBUTE_NAME = 19;
    public static readonly ATOM = 20;
    public static readonly DEFAULT_CASE = 21;
    public static readonly STRING = 22;
    public static readonly REGEX = 23;
    public static readonly TRIPLE_QUOTE = 24;
    public static readonly EMBEDDED_CODE = 25;
    public static readonly MULTI_LINE_CODE_START = 26;
    public static readonly MULTILINE_STR_CLEAN = 27;
    public static readonly MULTILINE_STR_TRIM = 28;
    public static readonly MULTILINE_STR_PRESERVE = 29;
    public static readonly MULTILINE_STR_PRESERVE_ALL = 30;
    public static readonly IDENTIFIER = 31;
    public static readonly LOWER_NAME = 32;
    public static readonly VARIABLE = 33;
    public static readonly ARROW = 34;
    public static readonly COLON = 35;
    public static readonly COMMA = 36;
    public static readonly DOT = 37;
    public static readonly LPAREN = 38;
    public static readonly RPAREN = 39;
    public static readonly LBRACE = 40;
    public static readonly RBRACE = 41;
    public static readonly LANGLE = 42;
    public static readonly RANGLE = 43;
    public static readonly PIPE = 44;
    public static readonly SLASH = 45;
    public static readonly HYPHEN = 46;
    public static readonly SPREAD = 47;
    public static readonly WS = 48;
    public static readonly COMMENT = 49;
    public static readonly NEWLINE = 50;
    public static readonly INDENT = 51;
    public static readonly DEDENT = 52;
    public static readonly TT_TYPE_NAME = 53;
    public static readonly TT_WS = 54;
    public static readonly TT_CONTENT = 55;
    public static readonly TT_PIPE = 56;
    public static readonly TT_RANGLE = 57;
    public static readonly TS_TRIPLE_QUOTE_END = 58;
    public static readonly TS_INTERPOLATION_START = 59;
    public static readonly TS_CONTENT = 60;
    public static readonly INT_RBRACE = 61;
    public static readonly INT_VARIABLE = 62;
    public static readonly INT_DOT = 63;
    public static readonly INT_LOWER_NAME = 64;
    public static readonly INT_WS = 65;
    public static readonly MC_END = 66;
    public static readonly MC_CONTENT = 67;
    public static readonly ML_END = 68;
    public static readonly ML_CONTENT = 69;
    public static readonly ML_NEWLINE = 70;
    public static readonly TYPE_TAG_MODE = 1;
    public static readonly TRIPLE_STRING_MODE = 2;
    public static readonly INTERPOLATION_MODE = 3;
    public static readonly MULTI_CODE_MODE = 4;
    public static readonly MULTILINE_MODE = 5;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'import'", "'as'", "'with'", "'match'", "'start'", "'on'", 
        "'append'", "'set'", "'merge'", "'to'", "'into'", "'result'", "':end'", 
        "':cancel'", "':error'", null, null, null, null, null, "':default'", 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, "'->'", "':'", "','", null, "'('", "')'", "'{'", null, "'<'", 
        null, null, "'/'", "'-'", "'...'", null, null, null, "'INDENT_PLACEHOLDER'", 
        "'DEDENT_PLACEHOLDER'", null, null, null, null, null, null, "'#{'", 
        null, null, null, null, null, null, "'<$'"
    ];

    public static readonly symbolicNames = [
        null, "IMPORT", "AS", "WITH", "MATCH", "START", "ON", "APPEND", 
        "SET", "MERGE", "TO", "INTO", "RESULT", "FLOW_END", "FLOW_CANCEL", 
        "FLOW_ERROR", "BOOLEAN", "NULL", "NUMBER", "ATTRIBUTE_NAME", "ATOM", 
        "DEFAULT_CASE", "STRING", "REGEX", "TRIPLE_QUOTE", "EMBEDDED_CODE", 
        "MULTI_LINE_CODE_START", "MULTILINE_STR_CLEAN", "MULTILINE_STR_TRIM", 
        "MULTILINE_STR_PRESERVE", "MULTILINE_STR_PRESERVE_ALL", "IDENTIFIER", 
        "LOWER_NAME", "VARIABLE", "ARROW", "COLON", "COMMA", "DOT", "LPAREN", 
        "RPAREN", "LBRACE", "RBRACE", "LANGLE", "RANGLE", "PIPE", "SLASH", 
        "HYPHEN", "SPREAD", "WS", "COMMENT", "NEWLINE", "INDENT", "DEDENT", 
        "TT_TYPE_NAME", "TT_WS", "TT_CONTENT", "TT_PIPE", "TT_RANGLE", "TS_TRIPLE_QUOTE_END", 
        "TS_INTERPOLATION_START", "TS_CONTENT", "INT_RBRACE", "INT_VARIABLE", 
        "INT_DOT", "INT_LOWER_NAME", "INT_WS", "MC_END", "MC_CONTENT", "ML_END", 
        "ML_CONTENT", "ML_NEWLINE"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE", "TYPE_TAG_MODE", "TRIPLE_STRING_MODE", "INTERPOLATION_MODE", 
        "MULTI_CODE_MODE", "MULTILINE_MODE",
    ];

    public static readonly ruleNames = [
        "IMPORT", "AS", "WITH", "MATCH", "START", "ON", "APPEND", "SET", 
        "MERGE", "TO", "INTO", "RESULT", "FLOW_END", "FLOW_CANCEL", "FLOW_ERROR", 
        "BOOLEAN", "NULL", "NUMBER", "ATTRIBUTE_NAME", "ATOM", "DEFAULT_CASE", 
        "STRING", "REGEX", "TRIPLE_QUOTE", "EMBEDDED_CODE", "MULTI_LINE_CODE_START", 
        "MULTILINE_STR_CLEAN", "MULTILINE_STR_TRIM", "MULTILINE_STR_PRESERVE", 
        "MULTILINE_STR_PRESERVE_ALL", "IDENTIFIER", "LOWER_NAME", "VARIABLE", 
        "ARROW", "COLON", "COMMA", "DOT", "LPAREN", "RPAREN", "LBRACE", 
        "RBRACE", "LANGLE", "RANGLE", "PIPE", "SLASH", "HYPHEN", "SPREAD", 
        "WS", "COMMENT", "NEWLINE", "INDENT", "DEDENT", "TT_TYPE_NAME", 
        "TT_WS", "TT_CONTENT", "TT_PIPE", "TT_RANGLE", "TS_TRIPLE_QUOTE_END", 
        "TS_INTERPOLATION_START", "TS_CONTENT", "INT_RBRACE", "INT_VARIABLE", 
        "INT_DOT", "INT_LOWER_NAME", "INT_WS", "MC_END", "MC_CONTENT", "ML_END", 
        "ML_CONTENT", "ML_NEWLINE",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RclLexer._ATN, RclLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "RclLexer.g4"; }

    public get literalNames(): (string | null)[] { return RclLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return RclLexer.symbolicNames; }
    public get ruleNames(): string[] { return RclLexer.ruleNames; }

    public get serializedATN(): number[] { return RclLexer._serializedATN; }

    public get channelNames(): string[] { return RclLexer.channelNames; }

    public get modeNames(): string[] { return RclLexer.modeNames; }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 50:
            return this.INDENT_sempred(localContext, predIndex);
        case 51:
            return this.DEDENT_sempred(localContext, predIndex);
        }
        return true;
    }
    private INDENT_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return false;
        }
        return true;
    }
    private DEDENT_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return false;
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,0,70,668,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
        2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
        2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,
        7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
        2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,
        7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,
        2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,
        7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
        2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
        7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,
        2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,
        7,69,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
        15,246,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,3,16,260,8,16,1,17,3,17,263,8,17,1,17,4,17,266,8,17,11,17,
        12,17,267,1,17,1,17,4,17,272,8,17,11,17,12,17,273,3,17,276,8,17,
        1,17,1,17,3,17,280,8,17,1,17,4,17,283,8,17,11,17,12,17,284,3,17,
        287,8,17,1,18,1,18,4,18,291,8,18,11,18,12,18,292,1,18,5,18,296,8,
        18,10,18,12,18,299,9,18,1,18,1,18,1,19,1,19,1,19,5,19,306,8,19,10,
        19,12,19,309,9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,327,8,21,10,21,12,21,330,9,
        21,1,21,1,21,5,21,334,8,21,10,21,12,21,337,9,21,1,21,1,21,1,22,1,
        22,1,22,1,22,4,22,345,8,22,11,22,12,22,346,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,362,8,24,1,24,1,
        24,5,24,366,8,24,10,24,12,24,369,9,24,1,25,1,25,1,25,1,25,1,25,3,
        25,376,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,5,26,386,8,26,
        10,26,12,26,389,9,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,
        399,8,27,10,27,12,27,402,9,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,5,28,412,8,28,10,28,12,28,415,9,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,5,29,426,8,29,10,29,12,29,429,9,29,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,4,30,438,8,30,11,30,12,30,439,1,30,1,30,
        5,30,444,8,30,10,30,12,30,447,9,30,5,30,449,8,30,10,30,12,30,452,
        9,30,1,31,1,31,5,31,456,8,31,10,31,12,31,459,9,31,1,32,1,32,1,32,
        5,32,464,8,32,10,32,12,32,467,9,32,1,33,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,
        1,46,1,47,4,47,503,8,47,11,47,12,47,504,1,47,1,47,1,48,1,48,5,48,
        511,8,48,10,48,12,48,514,9,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,52,4,52,563,8,52,11,52,12,52,564,1,53,4,53,568,8,53,11,53,12,53,
        569,1,53,1,53,1,54,4,54,575,8,54,11,54,12,54,576,1,54,4,54,580,8,
        54,11,54,12,54,581,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,
        1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,4,59,602,8,59,11,59,
        12,59,603,1,60,1,60,1,60,1,60,1,61,1,61,1,61,5,61,613,8,61,10,61,
        12,61,616,9,61,1,62,1,62,1,63,1,63,5,63,622,8,63,10,63,12,63,625,
        9,63,1,64,4,64,628,8,64,11,64,12,64,629,1,64,1,64,1,65,1,65,1,65,
        1,65,1,65,1,66,4,66,640,8,66,11,66,12,66,641,1,67,1,67,5,67,646,
        8,67,10,67,12,67,649,9,67,1,67,1,67,5,67,653,8,67,10,67,12,67,656,
        9,67,1,67,1,67,1,67,1,67,1,68,4,68,663,8,68,11,68,12,68,664,1,69,
        1,69,2,603,641,0,70,6,1,8,2,10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,
        10,26,11,28,12,30,13,32,14,34,15,36,16,38,17,40,18,42,19,44,20,46,
        21,48,22,50,23,52,24,54,25,56,26,58,27,60,28,62,29,64,30,66,31,68,
        32,70,33,72,34,74,35,76,36,78,37,80,38,82,39,84,40,86,41,88,42,90,
        43,92,44,94,45,96,46,98,47,100,48,102,49,104,50,106,51,108,52,110,
        53,112,54,114,55,116,56,118,57,120,58,122,59,124,60,126,61,128,62,
        130,63,132,64,134,65,136,66,138,67,140,68,142,69,144,70,6,0,1,2,
        3,4,5,16,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,97,122,
        4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,3,0,65,90,95,95,97,122,
        1,0,125,125,3,0,10,10,13,13,34,34,3,0,10,10,13,13,47,47,2,0,10,10,
        13,13,1,0,65,90,5,0,45,45,48,57,65,90,95,95,97,122,2,0,48,57,65,
        90,2,0,65,90,97,122,4,0,10,10,13,13,62,62,124,124,713,0,6,1,0,0,
        0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,
        0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,
        0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,
        0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,
        0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,
        0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,
        0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,
        0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,
        0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,
        0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,
        0,0,0,0,108,1,0,0,0,1,110,1,0,0,0,1,112,1,0,0,0,1,114,1,0,0,0,1,
        116,1,0,0,0,1,118,1,0,0,0,2,120,1,0,0,0,2,122,1,0,0,0,2,124,1,0,
        0,0,3,126,1,0,0,0,3,128,1,0,0,0,3,130,1,0,0,0,3,132,1,0,0,0,3,134,
        1,0,0,0,4,136,1,0,0,0,4,138,1,0,0,0,5,140,1,0,0,0,5,142,1,0,0,0,
        5,144,1,0,0,0,6,146,1,0,0,0,8,153,1,0,0,0,10,156,1,0,0,0,12,161,
        1,0,0,0,14,167,1,0,0,0,16,173,1,0,0,0,18,176,1,0,0,0,20,183,1,0,
        0,0,22,187,1,0,0,0,24,193,1,0,0,0,26,196,1,0,0,0,28,201,1,0,0,0,
        30,208,1,0,0,0,32,213,1,0,0,0,34,221,1,0,0,0,36,245,1,0,0,0,38,259,
        1,0,0,0,40,262,1,0,0,0,42,288,1,0,0,0,44,302,1,0,0,0,46,310,1,0,
        0,0,48,319,1,0,0,0,50,340,1,0,0,0,52,350,1,0,0,0,54,356,1,0,0,0,
        56,370,1,0,0,0,58,383,1,0,0,0,60,394,1,0,0,0,62,407,1,0,0,0,64,420,
        1,0,0,0,66,434,1,0,0,0,68,453,1,0,0,0,70,460,1,0,0,0,72,468,1,0,
        0,0,74,471,1,0,0,0,76,473,1,0,0,0,78,475,1,0,0,0,80,477,1,0,0,0,
        82,479,1,0,0,0,84,481,1,0,0,0,86,483,1,0,0,0,88,485,1,0,0,0,90,489,
        1,0,0,0,92,491,1,0,0,0,94,493,1,0,0,0,96,495,1,0,0,0,98,497,1,0,
        0,0,100,502,1,0,0,0,102,508,1,0,0,0,104,517,1,0,0,0,106,519,1,0,
        0,0,108,540,1,0,0,0,110,562,1,0,0,0,112,567,1,0,0,0,114,574,1,0,
        0,0,116,583,1,0,0,0,118,585,1,0,0,0,120,589,1,0,0,0,122,595,1,0,
        0,0,124,601,1,0,0,0,126,605,1,0,0,0,128,609,1,0,0,0,130,617,1,0,
        0,0,132,619,1,0,0,0,134,627,1,0,0,0,136,633,1,0,0,0,138,639,1,0,
        0,0,140,643,1,0,0,0,142,662,1,0,0,0,144,666,1,0,0,0,146,147,5,105,
        0,0,147,148,5,109,0,0,148,149,5,112,0,0,149,150,5,111,0,0,150,151,
        5,114,0,0,151,152,5,116,0,0,152,7,1,0,0,0,153,154,5,97,0,0,154,155,
        5,115,0,0,155,9,1,0,0,0,156,157,5,119,0,0,157,158,5,105,0,0,158,
        159,5,116,0,0,159,160,5,104,0,0,160,11,1,0,0,0,161,162,5,109,0,0,
        162,163,5,97,0,0,163,164,5,116,0,0,164,165,5,99,0,0,165,166,5,104,
        0,0,166,13,1,0,0,0,167,168,5,115,0,0,168,169,5,116,0,0,169,170,5,
        97,0,0,170,171,5,114,0,0,171,172,5,116,0,0,172,15,1,0,0,0,173,174,
        5,111,0,0,174,175,5,110,0,0,175,17,1,0,0,0,176,177,5,97,0,0,177,
        178,5,112,0,0,178,179,5,112,0,0,179,180,5,101,0,0,180,181,5,110,
        0,0,181,182,5,100,0,0,182,19,1,0,0,0,183,184,5,115,0,0,184,185,5,
        101,0,0,185,186,5,116,0,0,186,21,1,0,0,0,187,188,5,109,0,0,188,189,
        5,101,0,0,189,190,5,114,0,0,190,191,5,103,0,0,191,192,5,101,0,0,
        192,23,1,0,0,0,193,194,5,116,0,0,194,195,5,111,0,0,195,25,1,0,0,
        0,196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,116,0,0,199,200,
        5,111,0,0,200,27,1,0,0,0,201,202,5,114,0,0,202,203,5,101,0,0,203,
        204,5,115,0,0,204,205,5,117,0,0,205,206,5,108,0,0,206,207,5,116,
        0,0,207,29,1,0,0,0,208,209,5,58,0,0,209,210,5,101,0,0,210,211,5,
        110,0,0,211,212,5,100,0,0,212,31,1,0,0,0,213,214,5,58,0,0,214,215,
        5,99,0,0,215,216,5,97,0,0,216,217,5,110,0,0,217,218,5,99,0,0,218,
        219,5,101,0,0,219,220,5,108,0,0,220,33,1,0,0,0,221,222,5,58,0,0,
        222,223,5,101,0,0,223,224,5,114,0,0,224,225,5,114,0,0,225,226,5,
        111,0,0,226,227,5,114,0,0,227,35,1,0,0,0,228,229,5,84,0,0,229,230,
        5,114,0,0,230,231,5,117,0,0,231,246,5,101,0,0,232,233,5,89,0,0,233,
        234,5,101,0,0,234,246,5,115,0,0,235,236,5,70,0,0,236,237,5,97,0,
        0,237,238,5,108,0,0,238,239,5,115,0,0,239,246,5,101,0,0,240,241,
        5,78,0,0,241,246,5,111,0,0,242,243,5,79,0,0,243,244,5,102,0,0,244,
        246,5,102,0,0,245,228,1,0,0,0,245,232,1,0,0,0,245,235,1,0,0,0,245,
        240,1,0,0,0,245,242,1,0,0,0,246,37,1,0,0,0,247,248,5,78,0,0,248,
        249,5,117,0,0,249,250,5,108,0,0,250,260,5,108,0,0,251,252,5,78,0,
        0,252,253,5,111,0,0,253,254,5,110,0,0,254,260,5,101,0,0,255,256,
        5,86,0,0,256,257,5,111,0,0,257,258,5,105,0,0,258,260,5,100,0,0,259,
        247,1,0,0,0,259,251,1,0,0,0,259,255,1,0,0,0,260,39,1,0,0,0,261,263,
        5,45,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,
        7,0,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,
        1,0,0,0,268,275,1,0,0,0,269,271,5,46,0,0,270,272,7,0,0,0,271,270,
        1,0,0,0,272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,276,
        1,0,0,0,275,269,1,0,0,0,275,276,1,0,0,0,276,286,1,0,0,0,277,279,
        7,1,0,0,278,280,7,2,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,282,
        1,0,0,0,281,283,7,0,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,
        1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,277,1,0,0,0,286,287,
        1,0,0,0,287,41,1,0,0,0,288,290,7,3,0,0,289,291,7,4,0,0,290,289,1,
        0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,297,1,
        0,0,0,294,296,7,5,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,
        0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,5,
        58,0,0,301,43,1,0,0,0,302,303,5,58,0,0,303,307,7,6,0,0,304,306,7,
        4,0,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,
        0,0,0,308,45,1,0,0,0,309,307,1,0,0,0,310,311,5,58,0,0,311,312,5,
        100,0,0,312,313,5,101,0,0,313,314,5,102,0,0,314,315,5,97,0,0,315,
        316,5,117,0,0,316,317,5,108,0,0,317,318,5,116,0,0,318,47,1,0,0,0,
        319,335,5,34,0,0,320,321,5,92,0,0,321,334,5,34,0,0,322,323,5,35,
        0,0,323,324,5,123,0,0,324,328,1,0,0,0,325,327,8,7,0,0,326,325,1,
        0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,331,1,
        0,0,0,330,328,1,0,0,0,331,334,5,125,0,0,332,334,8,8,0,0,333,320,
        1,0,0,0,333,322,1,0,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,
        1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,339,
        5,34,0,0,339,49,1,0,0,0,340,344,5,47,0,0,341,342,5,92,0,0,342,345,
        5,47,0,0,343,345,8,9,0,0,344,341,1,0,0,0,344,343,1,0,0,0,345,346,
        1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,349,
        5,47,0,0,349,51,1,0,0,0,350,351,5,34,0,0,351,352,5,34,0,0,352,353,
        5,34,0,0,353,354,1,0,0,0,354,355,6,23,0,0,355,53,1,0,0,0,356,361,
        5,36,0,0,357,358,5,106,0,0,358,362,5,115,0,0,359,360,5,116,0,0,360,
        362,5,115,0,0,361,357,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,
        363,1,0,0,0,363,367,5,62,0,0,364,366,8,10,0,0,365,364,1,0,0,0,366,
        369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,55,1,0,0,0,369,367,
        1,0,0,0,370,375,5,36,0,0,371,372,5,106,0,0,372,376,5,115,0,0,373,
        374,5,116,0,0,374,376,5,115,0,0,375,371,1,0,0,0,375,373,1,0,0,0,
        375,376,1,0,0,0,376,377,1,0,0,0,377,378,5,62,0,0,378,379,5,62,0,
        0,379,380,5,62,0,0,380,381,1,0,0,0,381,382,6,25,1,0,382,57,1,0,0,
        0,383,387,5,124,0,0,384,386,7,5,0,0,385,384,1,0,0,0,386,389,1,0,
        0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,387,1,0,
        0,0,390,391,3,104,49,0,391,392,1,0,0,0,392,393,6,26,2,0,393,59,1,
        0,0,0,394,395,5,124,0,0,395,396,5,45,0,0,396,400,1,0,0,0,397,399,
        7,5,0,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,
        1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,404,3,104,49,0,404,405,
        1,0,0,0,405,406,6,27,2,0,406,61,1,0,0,0,407,408,5,43,0,0,408,409,
        5,124,0,0,409,413,1,0,0,0,410,412,7,5,0,0,411,410,1,0,0,0,412,415,
        1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,413,
        1,0,0,0,416,417,3,104,49,0,417,418,1,0,0,0,418,419,6,28,2,0,419,
        63,1,0,0,0,420,421,5,43,0,0,421,422,5,124,0,0,422,423,5,43,0,0,423,
        427,1,0,0,0,424,426,7,5,0,0,425,424,1,0,0,0,426,429,1,0,0,0,427,
        425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,430,
        431,3,104,49,0,431,432,1,0,0,0,432,433,6,29,2,0,433,65,1,0,0,0,434,
        450,7,11,0,0,435,449,7,12,0,0,436,438,7,5,0,0,437,436,1,0,0,0,438,
        439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,
        445,7,13,0,0,442,444,7,12,0,0,443,442,1,0,0,0,444,447,1,0,0,0,445,
        443,1,0,0,0,445,446,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,448,
        435,1,0,0,0,448,437,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,
        451,1,0,0,0,451,67,1,0,0,0,452,450,1,0,0,0,453,457,7,3,0,0,454,456,
        7,4,0,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,
        1,0,0,0,458,69,1,0,0,0,459,457,1,0,0,0,460,461,5,64,0,0,461,465,
        7,6,0,0,462,464,7,4,0,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,
        1,0,0,0,465,466,1,0,0,0,466,71,1,0,0,0,467,465,1,0,0,0,468,469,5,
        45,0,0,469,470,5,62,0,0,470,73,1,0,0,0,471,472,5,58,0,0,472,75,1,
        0,0,0,473,474,5,44,0,0,474,77,1,0,0,0,475,476,5,46,0,0,476,79,1,
        0,0,0,477,478,5,40,0,0,478,81,1,0,0,0,479,480,5,41,0,0,480,83,1,
        0,0,0,481,482,5,123,0,0,482,85,1,0,0,0,483,484,5,125,0,0,484,87,
        1,0,0,0,485,486,5,60,0,0,486,487,1,0,0,0,487,488,6,41,3,0,488,89,
        1,0,0,0,489,490,5,62,0,0,490,91,1,0,0,0,491,492,5,124,0,0,492,93,
        1,0,0,0,493,494,5,47,0,0,494,95,1,0,0,0,495,496,5,45,0,0,496,97,
        1,0,0,0,497,498,5,46,0,0,498,499,5,46,0,0,499,500,5,46,0,0,500,99,
        1,0,0,0,501,503,7,5,0,0,502,501,1,0,0,0,503,504,1,0,0,0,504,502,
        1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,6,47,4,0,507,101,
        1,0,0,0,508,512,5,35,0,0,509,511,8,10,0,0,510,509,1,0,0,0,511,514,
        1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,512,
        1,0,0,0,515,516,6,48,4,0,516,103,1,0,0,0,517,518,7,10,0,0,518,105,
        1,0,0,0,519,520,5,73,0,0,520,521,5,78,0,0,521,522,5,68,0,0,522,523,
        5,69,0,0,523,524,5,78,0,0,524,525,5,84,0,0,525,526,5,95,0,0,526,
        527,5,80,0,0,527,528,5,76,0,0,528,529,5,65,0,0,529,530,5,67,0,0,
        530,531,5,69,0,0,531,532,5,72,0,0,532,533,5,79,0,0,533,534,5,76,
        0,0,534,535,5,68,0,0,535,536,5,69,0,0,536,537,5,82,0,0,537,538,1,
        0,0,0,538,539,4,50,0,0,539,107,1,0,0,0,540,541,5,68,0,0,541,542,
        5,69,0,0,542,543,5,68,0,0,543,544,5,69,0,0,544,545,5,78,0,0,545,
        546,5,84,0,0,546,547,5,95,0,0,547,548,5,80,0,0,548,549,5,76,0,0,
        549,550,5,65,0,0,550,551,5,67,0,0,551,552,5,69,0,0,552,553,5,72,
        0,0,553,554,5,79,0,0,554,555,5,76,0,0,555,556,5,68,0,0,556,557,5,
        69,0,0,557,558,5,82,0,0,558,559,1,0,0,0,559,560,4,51,1,0,560,109,
        1,0,0,0,561,563,7,14,0,0,562,561,1,0,0,0,563,564,1,0,0,0,564,562,
        1,0,0,0,564,565,1,0,0,0,565,111,1,0,0,0,566,568,7,5,0,0,567,566,
        1,0,0,0,568,569,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,571,
        1,0,0,0,571,572,6,53,4,0,572,113,1,0,0,0,573,575,7,5,0,0,574,573,
        1,0,0,0,575,576,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,579,
        1,0,0,0,578,580,8,15,0,0,579,578,1,0,0,0,580,581,1,0,0,0,581,579,
        1,0,0,0,581,582,1,0,0,0,582,115,1,0,0,0,583,584,5,124,0,0,584,117,
        1,0,0,0,585,586,5,62,0,0,586,587,1,0,0,0,587,588,6,56,5,0,588,119,
        1,0,0,0,589,590,5,34,0,0,590,591,5,34,0,0,591,592,5,34,0,0,592,593,
        1,0,0,0,593,594,6,57,5,0,594,121,1,0,0,0,595,596,5,35,0,0,596,597,
        5,123,0,0,597,598,1,0,0,0,598,599,6,58,6,0,599,123,1,0,0,0,600,602,
        9,0,0,0,601,600,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,603,601,
        1,0,0,0,604,125,1,0,0,0,605,606,5,125,0,0,606,607,1,0,0,0,607,608,
        6,60,5,0,608,127,1,0,0,0,609,610,5,64,0,0,610,614,7,6,0,0,611,613,
        7,4,0,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,
        1,0,0,0,615,129,1,0,0,0,616,614,1,0,0,0,617,618,5,46,0,0,618,131,
        1,0,0,0,619,623,7,3,0,0,620,622,7,4,0,0,621,620,1,0,0,0,622,625,
        1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,133,1,0,0,0,625,623,
        1,0,0,0,626,628,7,5,0,0,627,626,1,0,0,0,628,629,1,0,0,0,629,627,
        1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,6,64,4,0,632,135,
        1,0,0,0,633,634,5,60,0,0,634,635,5,36,0,0,635,636,1,0,0,0,636,637,
        6,65,5,0,637,137,1,0,0,0,638,640,9,0,0,0,639,638,1,0,0,0,640,641,
        1,0,0,0,641,642,1,0,0,0,641,639,1,0,0,0,642,139,1,0,0,0,643,647,
        3,104,49,0,644,646,7,5,0,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,
        1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,647,1,0,0,0,650,654,
        5,124,0,0,651,653,7,5,0,0,652,651,1,0,0,0,653,656,1,0,0,0,654,652,
        1,0,0,0,654,655,1,0,0,0,655,657,1,0,0,0,656,654,1,0,0,0,657,658,
        3,104,49,0,658,659,1,0,0,0,659,660,6,67,5,0,660,141,1,0,0,0,661,
        663,8,10,0,0,662,661,1,0,0,0,663,664,1,0,0,0,664,662,1,0,0,0,664,
        665,1,0,0,0,665,143,1,0,0,0,666,667,3,104,49,0,667,145,1,0,0,0,50,
        0,1,2,3,4,5,245,259,262,267,273,275,279,284,286,292,297,307,328,
        333,335,344,346,361,367,375,387,400,413,427,439,445,448,450,457,
        465,504,512,564,569,576,581,603,614,623,629,641,647,654,664,7,5,
        2,0,5,4,0,5,5,0,5,1,0,6,0,0,4,0,0,5,3,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RclLexer.__ATN) {
            RclLexer.__ATN = new antlr.ATNDeserializer().deserialize(RclLexer._serializedATN);
        }

        return RclLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RclLexer.literalNames, RclLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RclLexer.vocabulary;
    }

    private static readonly decisionsToDFA = RclLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}